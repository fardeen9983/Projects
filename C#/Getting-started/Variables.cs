// All this code is autogenerated and allows easy access to some System members
using System;
using System.Collections.Generic;
using System.Text;

namespace C_sharp_snippets.Getting_started
{
    class Variables
    {
         static void Main(string[] args)
        {
            //Variables are defined by keyword var. It automatically determines the data type.
            //The other way is to specify the data type and the variable name. This restricts the variable into accepting only one type of data
            //Valid variable identifiers: Variable name should start with a letter/ ' _ ' and can contain any combination of the former and the digits

            //string type holds text values in double quotes ""
            string name = "daemon";
            //char holds a single character value in single quotes ''
            char single = 'Y';
            
            //int (Int32) holds 4 byte integer numbers with no fractional portion
            int a = 9;
            Int32 b = 1032423424;
            //long (Int64) holds integer value of greater range
            long x = 405830495830495845;
            Int64 y = 4534523423465654645;

            //float represents 32 bit floating point values with a suffix F/f
            float m = 4545.345f;
            //double represents 64 bit floating point values with optional suffix D/d
            double n = 4545453453453453453453453453453464567476775675786789789789789789789784675646.36436;
            //decimal represents 128 bit floating point values with larger accuracy in decimal value with optional M/m suffix
            decimal o = 5645653.768709809840986408956894768465834534535345345345M;

            //Truth values true/false are represented by bool type 
            bool b1 = true, b2 = false;
    
            //Read two numbers from user and print their sum
            //The function Readline reads a string from console input but we need integers.
            //There are a number of ways for converting string to int.

            Console.WriteLine("Enter two integers : ");

            //Convert the input string to 32-bit integer
            var num1 = Convert.ToInt32(Console.ReadLine());

          
            //There are two for parsing defined for the data types.
            //Parse throws an exception if the operation fails while TryParse aandons the parsig if input is not compatible thus not throwing any exception
            int num2;
            var inp = Int32.TryParse(Console.ReadLine(), out num2);

            if (inp)
            {
                //inp is true: num2 holds integer value. So we can print the sum

                //Strings can be concatenated with same or other data types using the + operator
                //It automatically converts the other data types to their string equivalent by calling their ToString method (in case of Objects)
                Console.WriteLine("Sum of " + num1 + " and " + num2 + " : " + (num1 + num2));
            }
            else
            {
                //This indicates that the input was incompatible for String conversion
                Console.WriteLine("Unable to porcess input. Please enter a valid integer");
            }
        }
    }
}
